#!/usr/bin/env bash

# ** Commadore Amiga filesystem interaction shell script for GNU/Linux. **

# Dependencies
#	bash >= 4.x.x
#	GNU coreutils
#	mount, affs driver (Linux Kernel >= 2.x.x)
#	zip (Info-ZIP)

# For use with ADF/AFFS disk images.
# Use `--help` to display usage

# **	MIT LICENSE START	**
#
# Copyright (c) 2021 Kriss Wiggins
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the “Software”), to deal in the
# Software without restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the
# following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
# OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
# AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
# THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# **	MIT LICENSE END		**

VERSION='1.0.0'
ARCHIVER=zip
MNTPREFIX=$HOME/.mnt

#################
#	 Tools		#
#################

[ -n "${SUDO_USER-}" ] 	&& USER=$SUDO_USER
[ -z "${SUDO-}" ]		&& SUDO=sudo

exec_user() {
	# $1: command, $2: args, $3: use sudo (bool)
	local COM="$1"
	local ARGS="$2"
	[ "$3" == true ] && local COM="$SUDO $COM"
	LASTERR=$(sh -c "$COM $ARGS" 2>&1) || return $?
}

set_trap() {
	# $1: action, $2: signal
	set -uE
	trap "$1" $2
}

get_filesystems() {
	# $1: output variable
	local -n ref=$1
	local FS_PROC=/proc/filesystems
	local RELEASE=$(uname -r)
	local FS_MOD=/lib/modules/$RELEASE/kernel/fs
	if [ -f $FS_PROC ]; then
		[ -d $FS_MOD ] ||
			echo "Could not find kernel module directory for filesystem driver checking. \
					Continuing..." >&2
		local ref=$(cat $FS_PROC		| \
					awk '{print $NF}' 	| \
					sed '/^$/d'			; \
					ls -1 $FS_MOD 		| \
					sort -u)
	else
		echo "Filesystem list at $FS_PROC does not exist." >&2
	fi
}

check_affs() {
	get_filesystems FILESYSTEMS
	if [ "$FILESYSTEMS" != *"affs"* ]; then
		echo "Amiga Fast Filesystem support not available. Exiting..." >&2
		exit 1
	fi
}

_update_chmod() {
	shopt -s dotglob nullglob
	for OBJ in "$1"/*; do
		if [ -d "$OBJ" ]; then
			chmod 755 "$OBJ"
			${FUNCNAME[0]} "$OBJ"
		elif [ -x "$OBJ" ]; then
			chmod 755 "$OBJ"
		else
			chmod 644 "$OBJ"
		fi
	done
}

update_attrs() {
	# $1: directory, $2: use sudo (bool)
	local DIR="$1"
	local USE_SUDO=$2
	exec_user chown "-R $USER:$USER '$DIR'" $USE_SUDO
	
	if [ $USE_SUDO ]; then
		local SUBNAME="_update_chmod"
		local FUNC=$(declare -f $SUBNAME)
		sudo bash -c "$FUNC; $SUBNAME '$DIR'"
	else
		_update_chmod "$DIR"
	fi
}

archive_replacedir() {
	# $1: input directory, $2: output archive
	local IN="$1"
	local OUT="$2"
	local PARENT_IN=$(dirname "$IN")
	local BASENAME_IN=$(basename "$IN")
	echo $PARENT_IN
	echo $BASENAME_IN
	(cd "$PARENT_IN" && $ARCHIVER --move -FS -r -q - "$BASENAME_IN") > "$OUT"
	
	[ -z "${SUDOUSER-}" ] || chown $USER:$USER "$OUT"
}

gen_mntpoint() {
	# $1: directory prefix, $2: output variable
	local PREFIX="$1"
	local -n ref=$2
	
	local tmp="$PREFIX"
	local i=1
	while [ -d "$tmp" ]; do
		local tmp="$PREFIX$i"
		i=$(($i + 1))
	done

	ref=$tmp
}

check_exec() {
	# $1: executable name
	local LOC=$(which "$1")
	if [ ! $? ]; then
		echo "$LOC" >&2
		return $?
	fi
}

remext() {
	# $1: filename
	echo "$1" | cut -f 1 -d '.'
}

#################
#	Commands	#
#################

extract() {
	# $1: source adf, $2: destination directory, $3: use sudo (bool)
	gen_mntpoint "$MNTPREFIX" MNTPOINT
	local SRC=$1
	local DEST=$2
	local USE_SUDO=$3
	
	mkdir -p "$MNTPOINT" "$DEST"
	exec_user mount "-t affs \
					-o loop,ro,protect \
					--source '$SRC' \
					--target '$MNTPOINT'" $USE_SUDO

	local MNTLIST=$(ls -A "$MNTPOINT")
	if [ -n "$MNTLIST" ]; then
		shopt -s dotglob nullglob
		exec_user cp "-R '$MNTPOINT'/* '$DEST'" $USE_SUDO
	fi
	
	exec_user umount "$MNTPOINT" $USE_SUDO
	[ -d $MNTPOINT ] && exec_user rm "-r '$MNTPOINT'" $USE_SUDO

	if [ -d "$DEST" ]; then
		update_attrs "$DEST" $USE_SUDO
	fi
}

archive() {
	# $1: source adf, $2: archive output filename, $3: use sudo (bool)
	gen_mntpoint "$MNTPREFIX" ARC_TRANSFER
	local IMG="$1"
	local ARC="$2"
	local IMG_OUT="$ARC_TRANSFER"/$(remext "$(basename "$IMG")")
	local USE_SUDO=$3
	
	mkdir -p "$ARC_TRANSFER"
	extract "$IMG" "$IMG_OUT" $USE_SUDO
	archive_replacedir "$IMG_OUT" "$ARC"
	[ -d "$ARC_TRANSFER" ] && rm -r "$ARC_TRANSFER"
}

usage() {
	local EXEC=$(basename $0)
	
	expand --tabs=4 <<-EOF
	usage: $EXEC [options]
	Amiga filesystem interaction script for GNU/Linux.
	
	options:
	 -x, --extract [filename]			extracts an AFFS disk image
	 									  (use with -o)
	 -a, --archive [filename]			creates a ZIP archive from an AFFS disk image
	 									  (use with -o)
	 -u, --update-attr [directory]		recursively update file attributes

	 -o, --output [filename|directory]	specify output destination	 
	 -s, --sudo							request superuser
	 -f, --force						use existing directories and overwrite existing files

	 -h, --help							shows help message and exits
	 -v, --version						prints version information and exits

	Usage examples:
	 $EXEC -x DISKIMAGE.adf -o Contents
	EOF
}

version() {
	cat <<-EOF
	adfs $VERSION
	Commadore Amiga filesystem interaction shell script for GNU/Linux
	
	Copyright (c) 2021 Kriss Wiggins
	MIT License <https://mit-license.org/>
	This is free software: you are free to change and redistribute it.
	There is no warranty to the extent permitted by law.

	Written by Kriss Wiggins [they/them]
	Enjoy <3
	EOF
}

#################
#	 Parser		#
#################

bad_exit() {
	# $1: message, $2: status code
	echo $1 >&2
	echo
	usage
	exit $(($2))
}

invalid_invocation() {
	# $1: message
	bad_exit "$1" 2
}

get_long() {
	# $1: output variable name, $2 ... argument list
	local -n ref=$1
	OPTIND=$(( $OPTIND+1 )); ref="${!OPTIND}"
}

parser_trap_err() {
	# $1: code, $2: message
	if [ -n "${MNTPOINT-}" ] && [ -d "$MNTPOINT" ]; then
		rm -r "$MNTPOINT"
	fi
	
	if [ -n "${ARC_TRANSFER-}" ] && [ -d "$ARC_TRANSFER" ]; then
		rm -r "$ARC_TRANSFER"
	fi

	if [ -n "${LASTERR-}" ]; then
		echo "$LASTERR"
		if [[ "$LASTERR" == *"failed to setup loop device"* ]]; then
			echo "Mount failed on loop setup, try with root permissions (use --sudo if applicable)" >&2
		fi
	fi
	
	echo "$2" >&2
	echo "Exiting with status code $1..." >&2
	exit $1
}

parse_adf() {
	# $1: source adf
	local FNAME="$1"
	if [ -f "$FNAME" ]; then
		local FNAME_UPPER="${1^^}"
		( [ "$FNAME_UPPER" == *".ADF" ] 			\
			|| [ $(head -c 3 "$FNAME") == "DOS" ] ) \
			&& return 0 || return 1
	else
		bad_exit "Input file '$1' does not exist." 1
	fi
}

parse_extract() {
	# $1: source adf, $2: destination directory, $3: use sudo (bool)
	if [ "$FORCE" == true ] || [ ! -e "$2" ]; then
		parse_adf "$1"
		if [ $? == 0 ]; then
			set_trap 'parser_trap_err $? "Failed to extract AFFS image."' ERR
			extract "$1" "$2" $3
		else
			bad_exit "Invalid ADF image '$1'." 1
		fi
	else
		bad_exit "Output directory '$2' already exists." 1
	fi
}

parse_archive() {
	# $1: source adf, $2: archive output filename, $3: use sudo (bool)
	check_exec $ARCHIVER
	if [ $? == 0 ]; then
		if [ "$FORCE" == true ] || [ ! -e "$2" ]; then
			parse_adf "$1"
			if [ $? == 0 ]; then
				set_trap 'parser_trap_err $? "Failed to archive AFFS image."' ERR
				archive "$1" "$2" $3
			else
				bad_exit "Invalid ADF image '$1'." 1
			fi
		else
			bad_exit "Output file '$2' already exists." 1
		fi
	else
		bad_exit "Archiver '$ARCHIVER' is not available." $?
	fi
}

parse_updateattrs() {
	# $1: directory, $2: use sudo (bool)
	if [ -d "$1" ]; then
		set_trap 'parser_trap_err $? "Failed to update attributes."' ERR
		update_attrs "$1" $2
	else
		bad_exit "Directory '$1' does not exist." 1
	fi
}

parse() {
	# $1 ...: argument list
	local OPTSTR=":x:a:o:u:sfhv-:"
	local COMMAND=false
	local USE_SUDO=false
	while getopts $OPTSTR OPT; do
		case "$OPT" in
			-)
				case "${OPTARG}" in
					extract)
						get_long ARG "$@"
						local EXTRACT_SRC=${ARG}
						;;
					archive)
						get_long ARG "$@"
						local ARC_SRC=${ARG}
						;;
					output)
						get_long ARG "$@"
						local OUTPUT=${ARG}
						;;
					update-attr)
						get_long ARG "$@"
						local UPDATE_DIR=${ARG}
						;;
					sudo)
						local USE_SUDO=true ;;
					force)
						local FORCE=true ;;
					help)
						usage; 		local RET=0; return $RET ;;
					version)
						version; 	local RET=0; return $RET ;;
					*)
						invalid_invocation "Invalid parameter." ;;
				esac ;;
			x)	local EXTRACT_SRC=${OPTARG} ;;
			a)	local ARC_SRC=${OPTARG} ;;
			o)	local OUTPUT=${OPTARG} ;;
			u)	local UPDATE_DIR=${OPTARG} ;;
			s)	local USE_SUDO=true ;;
			f)	local FORCE=true ;;
			h)	usage; 		local RET=0; return $RET ;;
			v)	version; 	local RET=0; return $RET ;;
			*)	invalid_invocation "Invalid parameter." ;;
		esac
	done

	[ -n "$RET" ] && return $RET
	(	[ -n "$EXTRACT_SRC" ] 		\
		|| [ -n "$ARC_SRC" ] 		\
		|| [ -n "$UPDATE_DIR" ] ) 	\
		&& local COMMAND=true

	if [ $USE_SUDO ]; then
		check_exec $SUDO || bad_exit "Could not find a sudo executable." 127
	fi
	
	if [ $COMMAND ]; then
		if [ -n "$OUTPUT" ]; then
			if [ -n "$EXTRACT_SRC" ]; then
				parse_extract "$(realpath "$EXTRACT_SRC")" 	\
								"$(realpath "$OUTPUT")" 	\
								$USE_SUDO
			elif [ -n "$ARC_SRC" ]; then
				parse_archive "$(realpath "$ARC_SRC")" 		\
								"$(realpath "$OUTPUT")" 	\
								$USE_SUDO
			else
				invalid_invocation "No files given to extract or archive."
			fi
		elif [ -n "$UPDATE_DIR" ]; then
			parse_updateattrs "$(realpath "$UPDATE_DIR")" $USE_SUDO
		else
			invalid_invocation "No output specified."
		fi
	else
		invalid_invocation "Not enough arguments given."
	fi
}

#################
#  Entrypoint	#
#################

parse "$@"
exit $?